{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { StatusBar } from 'expo-status-bar';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { NavigationContainer } from '@react-navigation/native';\nimport CategoriesScreen from \"./screens/CategoriesScreen\";\nimport { useFonts } from 'expo-font';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport AppLoading from 'expo-app-loading';\nimport MealsOverviewScreen from \"./screens/MealsOverviewScreen\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nvar Stack = createStackNavigator();\nexport default function App() {\n  var _useFonts = useFonts({\n      'open-sans': require(\"./assets/fonts/OpenSans-Regular.ttf\"),\n      'open-sans-bold': require(\"./assets/fonts/OpenSans-Bold.ttf\")\n    }),\n    _useFonts2 = _slicedToArray(_useFonts, 1),\n    fontsLoaded = _useFonts2[0];\n  if (!fontsLoaded) {\n    return _jsx(AppLoading, {});\n  }\n  return _jsxs(_Fragment, {\n    children: [_jsx(StatusBar, {\n      style: \"light\"\n    }), _jsx(NavigationContainer, {\n      children: _jsxs(Stack.Navigator, {\n        screenOptions: {\n          headerStyle: {\n            backgroundColor: '#350901'\n          },\n          headerTintColor: 'white',\n          cardStyle: {\n            backgroundColor: '#632419'\n          }\n        },\n        children: [_jsx(Stack.Screen, {\n          name: \"MealsCategories\",\n          component: CategoriesScreen,\n          options: {\n            title: \"All Categories\"\n          }\n        }), _jsx(Stack.Screen, {\n          name: \"MealsOverview\",\n          component: MealsOverviewScreen\n        })]\n      })\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {}\n});","map":{"version":3,"names":["StatusBar","StyleSheet","NavigationContainer","CategoriesScreen","useFonts","createStackNavigator","AppLoading","MealsOverviewScreen","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","Stack","App","_useFonts","require","_useFonts2","_slicedToArray","fontsLoaded","children","style","Navigator","screenOptions","headerStyle","backgroundColor","headerTintColor","cardStyle","Screen","name","component","options","title","styles","create","container"],"sources":["F:/Sample Apps/ReactNative app1/MealsApp/App.js"],"sourcesContent":["import { StatusBar } from 'expo-status-bar';\r\nimport { StyleSheet, } from 'react-native';\r\nimport { NavigationContainer } from '@react-navigation/native';\r\nimport CategoriesScreen from './screens/CategoriesScreen';\r\nimport { useFonts } from 'expo-font'\r\nimport { createStackNavigator } from '@react-navigation/stack';\r\nimport AppLoading from 'expo-app-loading';\r\nimport MealsOverviewScreen from './screens/MealsOverviewScreen';\r\n\r\nconst Stack = createStackNavigator();\r\n\r\nexport default function App() {\r\n\r\n  const [fontsLoaded] = useFonts({\r\n    'open-sans': require('./assets/fonts/OpenSans-Regular.ttf'),\r\n    'open-sans-bold': require('./assets/fonts/OpenSans-Bold.ttf'),\r\n  });\r\n\r\n  if (!fontsLoaded) {\r\n    return <AppLoading />;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <StatusBar style='light' />\r\n      <NavigationContainer>\r\n        <Stack.Navigator\r\n          screenOptions={{\r\n            headerStyle: { backgroundColor: '#350901' },\r\n            headerTintColor: 'white',\r\n            cardStyle: { backgroundColor: '#632419' }\r\n          }\r\n          }\r\n        >\r\n          <Stack.Screen\r\n            name=\"MealsCategories\"\r\n            component={CategoriesScreen}\r\n            options={{\r\n              title: \"All Categories\",\r\n            }}\r\n          />\r\n          <Stack.Screen name=\"MealsOverview\" component={MealsOverviewScreen} />\r\n        </Stack.Navigator>\r\n      </NavigationContainer>\r\n    </>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n\r\n  },\r\n});\r\n  \r\n  \r\n\r\n\r\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,iBAAiB;AAAC,OAAAC,UAAA;AAE5C,SAASC,mBAAmB,QAAQ,0BAA0B;AAC9D,OAAOC,gBAAgB;AACvB,SAASC,QAAQ,QAAQ,WAAW;AACpC,SAASC,oBAAoB,QAAQ,yBAAyB;AAC9D,OAAOC,UAAU,MAAM,kBAAkB;AACzC,OAAOC,mBAAmB;AAAsC,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEhE,IAAMC,KAAK,GAAGT,oBAAoB,CAAC,CAAC;AAEpC,eAAe,SAASU,GAAGA,CAAA,EAAG;EAE5B,IAAAC,SAAA,GAAsBZ,QAAQ,CAAC;MAC7B,WAAW,EAAEa,OAAO,sCAAsC,CAAC;MAC3D,gBAAgB,EAAEA,OAAO,mCAAmC;IAC9D,CAAC,CAAC;IAAAC,UAAA,GAAAC,cAAA,CAAAH,SAAA;IAHKI,WAAW,GAAAF,UAAA;EAKlB,IAAI,CAACE,WAAW,EAAE;IAChB,OAAOX,IAAA,CAACH,UAAU,IAAE,CAAC;EACvB;EAEA,OACEK,KAAA,CAAAE,SAAA;IAAAQ,QAAA,GACEZ,IAAA,CAACT,SAAS;MAACsB,KAAK,EAAC;IAAO,CAAE,CAAC,EAC3Bb,IAAA,CAACP,mBAAmB;MAAAmB,QAAA,EAClBV,KAAA,CAACG,KAAK,CAACS,SAAS;QACdC,aAAa,EAAE;UACbC,WAAW,EAAE;YAAEC,eAAe,EAAE;UAAU,CAAC;UAC3CC,eAAe,EAAE,OAAO;UACxBC,SAAS,EAAE;YAAEF,eAAe,EAAE;UAAU;QAC1C,CACC;QAAAL,QAAA,GAEDZ,IAAA,CAACK,KAAK,CAACe,MAAM;UACXC,IAAI,EAAC,iBAAiB;UACtBC,SAAS,EAAE5B,gBAAiB;UAC5B6B,OAAO,EAAE;YACPC,KAAK,EAAE;UACT;QAAE,CACH,CAAC,EACFxB,IAAA,CAACK,KAAK,CAACe,MAAM;UAACC,IAAI,EAAC,eAAe;UAACC,SAAS,EAAExB;QAAoB,CAAE,CAAC;MAAA,CACtD;IAAC,CACC,CAAC;EAAA,CACtB,CAAC;AAEP;AAEA,IAAM2B,MAAM,GAAGjC,UAAU,CAACkC,MAAM,CAAC;EAC/BC,SAAS,EAAE,CAEX;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}